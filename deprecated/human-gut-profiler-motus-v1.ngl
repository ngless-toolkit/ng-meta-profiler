#!/usr/bin/env ngless
ngless "1.0"
import "mocat" version "1.0"
import "specI" version "1.0"
import "motus" version "1.0"
import "igc" version "1.0"

input = load_mocat_sample(ARGV[1])
RESULTS = ARGV[2]

qc_reads = preprocess(input, keep_singles=False) using |read|:
    read = substrim(read, min_quality=25)
    if len(read) < 45:
        discard

human_mapped = map(qc_reads, reference='hg19')

non_human = select(human_mapped) using |mr|:
    mr = mr.filter(min_match_size=45, min_identity_pc=90, action={unmatch})
    if mr.flag({mapped}):
        discard

non_human_reads = as_reads(non_human)

igc_mapped = map(non_human_reads, reference='igc', mode_all=True)
igc_mapped_post = select(igc_mapped) using |mr|:
    mr = mr.filter(min_match_size=45, min_identity_pc=95, action={drop})
    if not mr.flag({mapped}):
        discard

igc_counts = count(igc_mapped_post,
                    features=['OGs'],
                    multiple={dist1},
                    normalization={scaled})
write(igc_counts,
        ofile=RESULTS </> 'eggNOG.traditional.counts.txt',
        auto_comments=[{hash}, {script}])

mapped_refmg = map(non_human_reads, reference='refmg')
mapped_refmg = select(mapped_refmg) using |mr|:
    mr = mr.filter(min_match_size=45, min_identity_pc=97, action={drop})
    if not mr.flag({mapped}):
        discard

write(count(mapped_refmg,
                features=['specI_cluster']),
    ofile=RESULTS </> 'specI.raw.counts.txt')

write(count(mapped_refmg,
                    features=['specI_cluster'],
                    normalization={scaled}),
    ofile=RESULTS </> 'specI.scaled.counts.txt')

specI_reads = as_reads(mapped_refmg)

motus_mapped = map(specI_reads, reference='motus', mode_all=True)
motus_raw_gene_counts = count(motus_mapped, features=['gene'], multiple={dist1})

write(motus(motus_raw_gene_counts),
        ofile=RESULTS </> 'motus.counts.txt')

